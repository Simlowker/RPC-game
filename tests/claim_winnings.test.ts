import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { UniversalPvp } from "../target/types/universal_pvp";
import { 
  Keypair, 
  LAMPORTS_PER_SOL, 
  PublicKey, 
  SystemProgram,
  Transaction
} from "@solana/web3.js";
import { assert } from "chai";

describe("Universal PvP - Claim Winnings", () => {
  // Configure le client pour utiliser le cluster local
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.UniversalPvp as Program<UniversalPvp>;
  
  // Comptes de test
  let gameRegistry: PublicKey;
  let creator: Keypair;
  let opponent: Keypair;
  let matchAccount: Keypair;
  let vault: PublicKey;

  before(async () => {
    // G√©n√©rer les comptes
    creator = Keypair.generate();
    opponent = Keypair.generate();
    matchAccount = Keypair.generate();

    // Airdrop de SOL pour les tests
    await provider.connection.requestAirdrop(creator.publicKey, 2 * LAMPORTS_PER_SOL);
    await provider.connection.requestAirdrop(opponent.publicKey, 2 * LAMPORTS_PER_SOL);
    
    // Attendre la confirmation des airdrops
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Trouver le PDA du registry
    [gameRegistry] = PublicKey.findProgramAddressSync(
      [Buffer.from("game_registry")],
      program.programId
    );

    // Trouver le PDA du vault
    [vault] = PublicKey.findProgramAddressSync(
      [Buffer.from("vault"), matchAccount.publicKey.toBuffer()],
      program.programId
    );

    try {
      // Initialiser le registry
      await program.methods
        .initializeRegistry()
        .accounts({
          gameRegistry,
          authority: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId,
        })
        .rpc();

      console.log("‚úÖ Game registry initialized");
    } catch (error) {
      // Le registry existe d√©j√†
      console.log("üìù Game registry already exists");
    }
  });

  it("Teste le workflow complet: cr√©er match ‚Üí rejoindre ‚Üí r√©gler ‚Üí r√©clamer gains", async () => {
    const betAmount = 0.1 * LAMPORTS_PER_SOL; // 0.1 SOL

    // Configuration du jeu RPS
    const gameConfig = {
      maxPlayers: 2,
      minBet: new anchor.BN(0.01 * LAMPORTS_PER_SOL),
      maxBet: new anchor.BN(10 * LAMPORTS_PER_SOL),
      rounds: 1, // Match simple
    };

    console.log("üéÆ Cr√©ation du match...");
    
    // 1. Cr√©er le match
    await program.methods
      .createUniversalMatch(
        { rockPaperScissors: {} }, // GameType
        new anchor.BN(betAmount),
        gameConfig
      )
      .accounts({
        matchAccount: matchAccount.publicKey,
        vault,
        creator: creator.publicKey,
        tokenMint: null,
        creatorTokenAccount: null,
        vaultTokenAccount: null,
        tokenProgram: null,
        systemProgram: SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      })
      .signers([creator, matchAccount])
      .rpc();

    console.log("‚úÖ Match cr√©√©");

    // 2. Rejoindre le match
    console.log("‚öîÔ∏è Rejoindre le match...");
    
    await program.methods
      .joinMatch()
      .accounts({
        matchAccount: matchAccount.publicKey,
        vault,
        opponent: opponent.publicKey,
        opponentTokenAccount: null,
        vaultTokenAccount: null,
        tokenProgram: null,
        systemProgram: SystemProgram.programId,
      })
      .signers([opponent])
      .rpc();

    console.log("‚úÖ Match rejoint");

    // 3. Simuler des mouvements et r√©gler le match
    console.log("üéØ Simulation des mouvements...");
    
    // Soumettre des mouvements fictifs (pour RPS)
    const move1 = Buffer.from([1]); // Rock
    const move2 = Buffer.from([2]); // Paper (Paper wins over Rock)

    await program.methods
      .submitMove(move1)
      .accounts({
        matchAccount: matchAccount.publicKey,
        player: creator.publicKey,
      })
      .signers([creator])
      .rpc();

    await program.methods
      .submitMove(move2)
      .accounts({
        matchAccount: matchAccount.publicKey,
        player: opponent.publicKey,
      })
      .signers([opponent])
      .rpc();

    console.log("‚úÖ Mouvements soumis");

    // 4. R√©gler le match
    console.log("‚öñÔ∏è R√®glement du match...");
    
    await program.methods
      .settleMatch()
      .accounts({
        matchAccount: matchAccount.publicKey,
      })
      .rpc();

    console.log("‚úÖ Match r√©gl√©");

    // 5. V√©rifier l'√©tat du match
    const matchData = await program.account.universalMatch.fetch(matchAccount.publicKey);
    console.log("üèÜ Statut du match:", matchData.status);
    console.log("üèÜ Gagnant:", matchData.winner?.toString());
    console.log("üí∞ Pot total:", matchData.totalPot.toString(), "lamports");

    // D√©terminer qui doit r√©clamer les gains
    const winner = matchData.winner;
    const winnerKeypair = winner?.equals(creator.publicKey) ? creator : opponent;
    const winnerName = winner?.equals(creator.publicKey) ? "Creator" : "Opponent";

    console.log(`üéØ ${winnerName} doit r√©clamer les gains...`);

    // 6. R√©clamer les gains (SOL)
    const balanceBeforeClaim = await provider.connection.getBalance(winnerKeypair.publicKey);
    console.log("üí≥ Solde avant r√©clamation:", balanceBeforeClaim / LAMPORTS_PER_SOL, "SOL");

    await program.methods
      .claimWinnings()
      .accounts({
        matchAccount: matchAccount.publicKey,
        vault,
        claimer: winnerKeypair.publicKey,
        claimerTokenAccount: null,
        vaultTokenAccount: null,
        tokenProgram: null,
        systemProgram: SystemProgram.programId,
      })
      .signers([winnerKeypair])
      .rpc();

    console.log("‚úÖ Gains r√©clam√©s");

    // 7. V√©rifier les soldes apr√®s r√©clamation
    const balanceAfterClaim = await provider.connection.getBalance(winnerKeypair.publicKey);
    console.log("üí≥ Solde apr√®s r√©clamation:", balanceAfterClaim / LAMPORTS_PER_SOL, "SOL");

    const gainReceived = balanceAfterClaim - balanceBeforeClaim;
    console.log("üí∞ Gain re√ßu:", gainReceived / LAMPORTS_PER_SOL, "SOL");

    // Le gagnant doit recevoir 100% du pot (2x le bet_amount)
    const expectedGain = betAmount * 2; // 100% du pot total
    
    // Permettre une petite marge d'erreur pour les frais de transaction
    const tolerance = 0.001 * LAMPORTS_PER_SOL; // 0.001 SOL de tol√©rance
    
    assert.isTrue(
      Math.abs(gainReceived - expectedGain) < tolerance,
      `Gain attendu: ${expectedGain / LAMPORTS_PER_SOL} SOL, re√ßu: ${gainReceived / LAMPORTS_PER_SOL} SOL`
    );

    console.log("üéâ Test r√©ussi! Le gagnant a re√ßu 100% du pot sans frais!");
  });

  it("Teste la r√©clamation en cas d'√©galit√©", async () => {
    const betAmount = 0.05 * LAMPORTS_PER_SOL; // 0.05 SOL
    const newMatchAccount = Keypair.generate();
    
    const [newVault] = PublicKey.findProgramAddressSync(
      [Buffer.from("vault"), newMatchAccount.publicKey.toBuffer()],
      program.programId
    );

    const gameConfig = {
      maxPlayers: 2,
      minBet: new anchor.BN(0.01 * LAMPORTS_PER_SOL),
      maxBet: new anchor.BN(10 * LAMPORTS_PER_SOL),
      rounds: 1,
    };

    // Cr√©er et rejoindre un nouveau match
    await program.methods
      .createUniversalMatch(
        { rockPaperScissors: {} },
        new anchor.BN(betAmount),
        gameConfig
      )
      .accounts({
        matchAccount: newMatchAccount.publicKey,
        vault: newVault,
        creator: creator.publicKey,
        tokenMint: null,
        creatorTokenAccount: null,
        vaultTokenAccount: null,
        tokenProgram: null,
        systemProgram: SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      })
      .signers([creator, newMatchAccount])
      .rpc();

    await program.methods
      .joinMatch()
      .accounts({
        matchAccount: newMatchAccount.publicKey,
        vault: newVault,
        opponent: opponent.publicKey,
        opponentTokenAccount: null,
        vaultTokenAccount: null,
        tokenProgram: null,
        systemProgram: SystemProgram.programId,
      })
      .signers([opponent])
      .rpc();

    // Simuler une √©galit√© (m√™me mouvement)
    const sameMoveData = Buffer.from([1]); // Rock vs Rock = Draw

    await program.methods
      .submitMove(sameMoveData)
      .accounts({
        matchAccount: newMatchAccount.publicKey,
        player: creator.publicKey,
      })
      .signers([creator])
      .rpc();

    await program.methods
      .submitMove(sameMoveData)
      .accounts({
        matchAccount: newMatchAccount.publicKey,
        player: opponent.publicKey,
      })
      .signers([opponent])
      .rpc();

    // R√©gler le match (√©galit√©)
    await program.methods
      .settleMatch()
      .accounts({
        matchAccount: newMatchAccount.publicKey,
      })
      .rpc();

    const matchData = await program.account.universalMatch.fetch(newMatchAccount.publicKey);
    console.log("‚öñÔ∏è R√©sultat: √âgalit√© (winner = null)");
    assert.isNull(matchData.winner, "En cas d'√©galit√©, winner doit √™tre null");

    // Les deux joueurs r√©cup√®rent leur mise
    const creatorBalanceBefore = await provider.connection.getBalance(creator.publicKey);
    const opponentBalanceBefore = await provider.connection.getBalance(opponent.publicKey);

    // Creator r√©clame sa mise
    await program.methods
      .claimWinnings()
      .accounts({
        matchAccount: newMatchAccount.publicKey,
        vault: newVault,
        claimer: creator.publicKey,
        claimerTokenAccount: null,
        vaultTokenAccount: null,
        tokenProgram: null,
        systemProgram: SystemProgram.programId,
      })
      .signers([creator])
      .rpc();

    // Opponent r√©clame sa mise
    await program.methods
      .claimWinnings()
      .accounts({
        matchAccount: newMatchAccount.publicKey,
        vault: newVault,
        claimer: opponent.publicKey,
        claimerTokenAccount: null,
        vaultTokenAccount: null,
        tokenProgram: null,
        systemProgram: SystemProgram.programId,
      })
      .signers([opponent])
      .rpc();

    const creatorBalanceAfter = await provider.connection.getBalance(creator.publicKey);
    const opponentBalanceAfter = await provider.connection.getBalance(opponent.publicKey);

    const creatorGain = creatorBalanceAfter - creatorBalanceBefore;
    const opponentGain = opponentBalanceAfter - opponentBalanceBefore;

    console.log("üí∞ Creator a r√©cup√©r√©:", creatorGain / LAMPORTS_PER_SOL, "SOL");
    console.log("üí∞ Opponent a r√©cup√©r√©:", opponentGain / LAMPORTS_PER_SOL, "SOL");

    // Chaque joueur r√©cup√®re exactement sa mise originale
    const tolerance = 0.001 * LAMPORTS_PER_SOL;
    assert.isTrue(
      Math.abs(creatorGain - betAmount) < tolerance,
      "Creator doit r√©cup√©rer sa mise originale"
    );
    assert.isTrue(
      Math.abs(opponentGain - betAmount) < tolerance,
      "Opponent doit r√©cup√©rer sa mise originale"
    );

    console.log("üéâ Test d'√©galit√© r√©ussi! Chaque joueur a r√©cup√©r√© sa mise exacte!");
  });
});