name: RPS Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.70.0'

jobs:
  # Code Quality and Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run typecheck

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: SAST Security Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true

  # Smart Contract Testing
  smart-contract-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.16.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Install Anchor
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install latest
          avm use latest

      - name: Rust format check
        run: cd rps-game && cargo fmt -- --check

      - name: Rust clippy
        run: cd rps-game && cargo clippy -- -D warnings

      - name: Build smart contract
        run: cd rps-game && anchor build

      - name: Test smart contract
        run: cd rps-game && anchor test

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Run integration tests
        run: npm run test:integration

      - name: E2E tests with Playwright
        run: |
          npx playwright install
          npm run test:e2e

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend

  # Build and Deploy to Staging
  deploy-staging:
    needs: [code-quality, smart-contract-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rps-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f config/deployment/Dockerfile.frontend -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build and push API image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rps-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f config/deployment/Dockerfile.api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to ECS Staging
        run: |
          aws ecs update-service --cluster rps-staging --service rps-frontend-service --force-new-deployment
          aws ecs update-service --cluster rps-staging --service rps-api-service --force-new-deployment

      - name: Run deployment verification tests
        run: |
          sleep 60  # Wait for deployment
          npm run test:staging-verification

  # Deploy to Production
  deploy-production:
    needs: [code-quality, smart-contract-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual approval required
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push production images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Frontend
          docker build -f config/deployment/Dockerfile.frontend -t $ECR_REGISTRY/rps-frontend:$IMAGE_TAG .
          docker push $ECR_REGISTRY/rps-frontend:$IMAGE_TAG
          
          # API
          docker build -f config/deployment/Dockerfile.api -t $ECR_REGISTRY/rps-api:$IMAGE_TAG .
          docker push $ECR_REGISTRY/rps-api:$IMAGE_TAG

      - name: Blue-Green Deployment
        run: |
          # Create new task definitions with new image
          aws ecs register-task-definition --cli-input-json file://config/deployment/ecs-task-definition.json
          
          # Update services with new task definition
          aws ecs update-service --cluster rps-production --service rps-frontend-service --task-definition rps-frontend:LATEST
          aws ecs update-service --cluster rps-production --service rps-api-service --task-definition rps-api:LATEST
          
          # Wait for deployment to complete
          aws ecs wait services-stable --cluster rps-production --services rps-frontend-service rps-api-service

      - name: Post-deployment verification
        run: |
          npm run test:production-verification
          npm run test:performance

      - name: Rollback on failure
        if: failure()
        run: |
          # Rollback to previous stable version
          aws ecs update-service --cluster rps-production --service rps-frontend-service --force-new-deployment
          aws ecs update-service --cluster rps-production --service rps-api-service --force-new-deployment

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'RPS Platform'
          path: '.'
          format: 'HTML'

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

      - name: Load testing with Artillery
        run: |
          npm install -g artillery
          artillery run config/testing/load-test.yml

      - name: Performance regression check
        run: npm run test:performance-regression